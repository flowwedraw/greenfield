# getAssetProofBatch

> Efficiently retrieve cryptographic merkle proofs for multiple compressed Solana NFTs in a single batch request.
This optimized verification API returns the complete proof paths required to validate multiple compressed
digital assets' existence and data integrity on the Solana blockchain without requiring separate API calls for each NFT.
Essential for high-performance applications like marketplaces, wallets, and gaming platforms that need to verify
ownership and authenticity of multiple compressed NFTs simultaneously with minimal latency and API usage.


## OpenAPI

````yaml openapi/das-api/getAssetProofBatch.yaml post /
paths:
  path: /
  method: post
  servers:
    - url: https://mainnet.helius-rpc.com
      description: Mainnet RPC endpoint
    - url: https://devnet.helius-rpc.com
      description: Devnet RPC endpoint
  request:
    security:
      - title: ApiKeyQuery
        parameters:
          query:
            api-key:
              type: apiKey
              description: >-
                Your Helius API key. You can get one for free in the
                [dashboard](https://dashboard.helius.dev/api-keys).
          header: {}
          cookie: {}
    parameters:
      path: {}
      query:
        api-key:
          schema:
            - type: string
              required: true
              description: >-
                Your Helius API key required for authenticating batch requests
                to the Solana compression API.
              example: string
      header: {}
      cookie: {}
    body:
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    enum:
                      - '2.0'
                    description: The version of the JSON-RPC protocol.
                    default: '2.0'
              id:
                allOf:
                  - type: string
                    description: An ID to identify the request.
                    default: '1'
              method:
                allOf:
                  - type: string
                    enum:
                      - getAssetProofBatch
                    description: The name of the DAS method to invoke.
                    default: getAssetProofBatch
              params:
                allOf:
                  - type: object
                    default:
                      ids:
                        - Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss
                    required:
                      - ids
                    properties:
                      ids:
                        type: array
                        items:
                          type: string
                          description: >-
                            Array of unique identifiers (mint addresses) of the
                            compressed Solana NFTs to retrieve merkle proofs
                            for.
                          example: Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss
            requiredProperties:
              - jsonrpc
              - id
              - method
              - params
        examples:
          example:
            value:
              jsonrpc: '2.0'
              id: '1'
              method: getAssetProofBatch
              params:
                ids:
                  - Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss
  response:
    '200':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              result:
                allOf:
                  - type: object
                    properties:
                      Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss:
                        type: object
                        properties:
                          root:
                            type: string
                            description: >-
                              The root hash of the Solana state compression
                              merkle tree containing this compressed NFT.
                            example: 2o6Y6EiY3WXhoaEpei2pHmHLYnHDcEQVhgD89GrGHDBH
                          proof:
                            type: array
                            description: >-
                              Array of merkle proof hashes needed to
                              cryptographically verify this Solana compressed
                              NFT's existence.
                            items:
                              type: string
                            example:
                              - EmJXiXEAhEN3FfNQtBa5hwR8LC5kHvdLsaGCoERosZjK
                              - 7NEfhcNPAwbw3L87fjsPqTz2fQdd1CjoLE138SD58FDQ
                          node_index:
                            type: integer
                            description: >-
                              The position index of this compressed Solana NFT
                              in the merkle tree structure.
                            example: 16384
                          leaf:
                            type: string
                            description: >-
                              The leaf hash representing this compressed Solana
                              NFT's data in the merkle tree.
                            example: 6YdZXw49M97mfFTwgQb6kxM2c6eqZkHSaW9XhhoZXtzv
                          tree_id:
                            type: string
                            description: >-
                              The unique identifier of the Solana merkle tree
                              where this compressed NFT is stored.
                            example: 2kuTFCcjbV22wvUmtmgsFR7cas7eZUzAu96jzJUvUcb7
                          burnt: false
              id:
                allOf:
                  - type: string
                    example: my-id
        examples:
          example:
            value:
              jsonrpc: '2.0'
              result:
                Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss:
                  root: 2o6Y6EiY3WXhoaEpei2pHmHLYnHDcEQVhgD89GrGHDBH
                  proof:
                    - EmJXiXEAhEN3FfNQtBa5hwR8LC5kHvdLsaGCoERosZjK
                    - 7NEfhcNPAwbw3L87fjsPqTz2fQdd1CjoLE138SD58FDQ
                  node_index: 16384
                  leaf: 6YdZXw49M97mfFTwgQb6kxM2c6eqZkHSaW9XhhoZXtzv
                  tree_id: 2kuTFCcjbV22wvUmtmgsFR7cas7eZUzAu96jzJUvUcb7
                  burnt: <any>
              id: my-id
        description: Successful response
    '400':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32602
                      message:
                        type: string
                        example: Invalid request parameters.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32602
                message: Invalid request parameters.
              id: '1'
        description: >-
          Bad Request. The server could not understand the request due to
          invalid syntax.
    '401':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32001
                      message:
                        type: string
                        example: Authentication failed. Missing or invalid API key.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32001
                message: Authentication failed. Missing or invalid API key.
              id: '1'
        description: >-
          Unauthorized. The client must authenticate itself to get the requested
          response.
    '403':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32003
                      message:
                        type: string
                        example: You do not have permission to access this resource.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32003
                message: You do not have permission to access this resource.
              id: '1'
        description: Forbidden. The client does not have access rights to the content.
    '404':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32004
                      message:
                        type: string
                        example: One or more assets in the batch were not found.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32004
                message: One or more assets in the batch were not found.
              id: '1'
        description: Not Found. The server can not find the requested resource.
    '429':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32029
                      message:
                        type: string
                        example: Rate limit exceeded. Please try again later.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32029
                message: Rate limit exceeded. Please try again later.
              id: '1'
        description: >-
          Too Many Requests. The user has sent too many requests in a given
          amount of time.
    '500':
      application/json:
        schemaArray:
          - type: object
            properties:
              jsonrpc:
                allOf:
                  - type: string
                    example: '2.0'
              error:
                allOf:
                  - type: object
                    properties:
                      code:
                        type: integer
                        example: -32000
                      message:
                        type: string
                        example: An unexpected error occurred on the server.
              id:
                allOf:
                  - type: string
                    example: '1'
        examples:
          example:
            value:
              jsonrpc: '2.0'
              error:
                code: -32000
                message: An unexpected error occurred on the server.
              id: '1'
        description: >-
          Internal Server Error. The server has encountered a situation it
          doesn't know how to handle.
  deprecated: false
  type: path
components:
  schemas: {}

````