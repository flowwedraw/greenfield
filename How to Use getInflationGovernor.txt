# How to Use getInflationGovernor

> Learn getInflationGovernor use cases, code examples, request parameters, response structure, and tips.

The [`getInflationGovernor`](https://www.helius.dev/docs/api-reference/rpc/http/getinflationgovernor) RPC method returns the current [inflation](https://www.helius.dev/blog/solana-issuance-inflation-schedule) parameters for the Solana cluster. These parameters define how the issuance of new SOL (inflation) is managed over time, including the initial rate, how it tapers, the long-term terminal rate, and allocations for the foundation.

Understanding these parameters is important for analyses related to tokenomics, staking rewards, and the overall economic model of Solana.

## Common Use Cases

* **Economic Analysis:** Retrieve the current parameters governing SOL inflation for research or modeling.
* **Staking Reward Calculation:** While `getInflationRate` gives the current annual rate, `getInflationGovernor` provides the underlying parameters that determine this rate and its future trajectory.
* **Understanding Tokenomics:** Gain insight into the planned token supply changes over time.

## Request Parameters

This method can optionally take a configuration object with the following parameter:

* **`commitment`** (string, optional): Specifies the [commitment level](https://www.helius.dev/blog/solana-commitment-levels) to use when querying the ledger. If not provided, the default commitment of the node is used (usually `finalized`).

## Response Structure

The `result` field of the JSON-RPC response will be an object containing the following inflation parameters (all are `f64` floating-point numbers representing percentages or terms):

* **`initial`**: The initial inflation rate (e.g., 0.15 for 15%).
* **`terminal`**: The long-term, terminal inflation rate (e.g., 0.015 for 1.5%).
* **`taper`**: The rate at which the inflation rate decreases from the `initial` to the `terminal` rate. This is a yearly percentage decrease in the inflation rate itself (e.g., a taper of 0.15 means the inflation rate decreases by 15% each year until it reaches the terminal rate).
* **`foundation`**: The proportion of the newly inflated SOL allocated to the Solana Foundation (e.g., 0.05 for 5%).
* **`foundationTerm`**: The period, in years, over which the `foundation` allocation is distributed.

## Examples

### 1. Get Current Inflation Governor Parameters

This example fetches the current inflation governor settings using the default commitment.

<CodeGroup>
  ```bash cURL
  curl https://mainnet.helius-rpc.com/?api-key=<api-key> -X POST -H "Content-Type: application/json" -d \
    '{
      "jsonrpc": "2.0",
      "id": 1,
      "method": "getInflationGovernor"
    }'
  ```

  ```javascript JavaScript (using @solana/web3.js)
  const { Connection } = require('@solana/web3.js');

  async function logInflationGovernor() {
    const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=<api-key>');
    try {
      const inflationGovernor = await connection.getInflationGovernor();
      console.log('Current Inflation Governor Parameters:');
      console.log(`  Initial Rate: ${(inflationGovernor.initial * 100).toFixed(2)}%`);
      console.log(`  Terminal Rate: ${(inflationGovernor.terminal * 100).toFixed(2)}%`);
      console.log(`  Taper Rate: ${(inflationGovernor.taper * 100).toFixed(2)}% per year`);
      console.log(`  Foundation Allocation: ${(inflationGovernor.foundation * 100).toFixed(2)}%`);
      console.log(`  Foundation Term: ${inflationGovernor.foundationTerm} years`);
      // For full raw details:
      // console.log(JSON.stringify(inflationGovernor, null, 2));
    } catch (error) {
      console.error('Error fetching inflation governor:', error);
    }
  }

  logInflationGovernor();
  ```
</CodeGroup>

### 2. Get Inflation Governor Parameters with 'confirmed' Commitment

<CodeGroup>
  ```bash cURL
  curl https://mainnet.helius-rpc.com/?api-key=<api-key> -X POST -H "Content-Type: application/json" -d \
    '{
      "jsonrpc": "2.0",
      "id": 1,
      "method": "getInflationGovernor",
      "params":[{"commitment":"confirmed"}]
    }'
  ```

  ```javascript JavaScript (using @solana/web3.js)
  const { Connection } = require('@solana/web3.js');

  async function logConfirmedInflationGovernor() {
    const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=<api-key>');
    try {
      const inflationGovernor = await connection.getInflationGovernor('confirmed');
      console.log('Confirmed Inflation Governor Parameters:');
      console.log(`  Initial Rate: ${(inflationGovernor.initial * 100).toFixed(2)}%`);
      console.log(`  Terminal Rate: ${(inflationGovernor.terminal * 100).toFixed(2)}%`);
      // console.log(JSON.stringify(inflationGovernor, null, 2));
    } catch (error) {
      console.error('Error fetching confirmed inflation governor:', error);
    }
  }

  logConfirmedInflationGovernor();
  ```
</CodeGroup>

## Developer Tips

* **Static Parameters:** These inflation parameters are set at the genesis of the cluster or by network upgrades and are generally not expected to change frequently without a formal governance process and network update.
* **Impact on Staking Rewards:** These parameters collectively determine the overall inflation schedule, which in turn affects the Annual Percentage Rate (APR) for staking SOL.
* **Foundation Allocation:** The `foundation` and `foundationTerm` parameters describe a specific portion of the inflation directed towards the Solana Foundation for a defined period to support ecosystem development and operations.

This guide provides an overview of how to use the `getInflationGovernor` RPC method to retrieve and understand the core parameters governing inflation on the Solana network.
